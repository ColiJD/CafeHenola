generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model roles {
  roleId    Int      @id @default(autoincrement())
  roleName  String   @unique(map: "roleName") @db.VarChar(50)
  createdAt DateTime @default(now()) @db.DateTime(0)
  users     users[]
}

model users {
  userId          Int               @id @default(autoincrement())
  userEmail       String            @unique(map: "userEmail") @db.VarChar(255)
  userPassword    String            @db.VarChar(255)
  userName        String?           @db.VarChar(100)
  roleId          Int
  createdAt       DateTime          @default(now()) @db.DateTime(0)
  password_resets password_resets[]
  roles           roles             @relation(fields: [roleId], references: [roleId], onUpdate: Restrict, map: "users_ibfk_1")

  @@index([roleId], map: "roleId")
}

model password_resets {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int
  token     String   @unique(map: "idx_token") @db.VarChar(64)
  expiresAt DateTime @db.DateTime(0)
  createdAt DateTime @default(now()) @db.DateTime(0)
  users     users    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Restrict, map: "password_resets_ibfk_1")

  @@index([userId], map: "userId")
}

model compradores {
  compradorId        Int                 @id @default(autoincrement())
  compradorNombre    String              @db.VarChar(255)
  compradorRTN       String?             @unique(map: "compradorRTN") @db.VarChar(50)
  compradorDireccion String?             @db.VarChar(300)
  compradorTelefono  String              @db.VarChar(50)
  compradorEmail     String              @db.VarChar(255)
  createdAt          DateTime            @default(now()) @db.DateTime(0)
  compra             compra[]
  inventariocliente  inventariocliente[]
}

model cierrecontrato {
  cierreID         Int       @id @default(autoincrement())
  contratoID       Int
  fechaCierre      DateTime? @default(now()) @db.DateTime(0)
  totalEntregadoQQ Decimal   @db.Decimal(15, 2)
  totalLps         Decimal   @db.Decimal(15, 2)
  tipoMovimiento   String    @default("Cierre de contrato") @db.VarChar(50)
  observaciones    String?   @db.VarChar(200)
  contrato         contrato  @relation(fields: [contratoID], references: [contratoID], onUpdate: Restrict, map: "cierrecontrato_ibfk_1")

  @@index([contratoID], map: "contratoID")
}

model cliente {
  clienteID          Int                 @id @default(autoincrement())
  clienteCedula      String?             @unique(map: "clienteCedula") @db.VarChar(15)
  clienteNombre      String?             @db.VarChar(20)
  clienteApellido    String?             @db.VarChar(20)
  clienteDirecion    String?             @db.VarChar(200)
  clienteMunicipio   String?             @db.VarChar(30)
  clienteDepartament String?             @db.VarChar(30)
  claveIHCAFE        String?             @db.VarChar(30)
  clienteTelefono    String?             @db.VarChar(30)
  clienteRTN         String?             @db.VarChar(17)
  compra             compra[]
  contrato           contrato[]
  deposito           deposito[]
  inventariocliente  inventariocliente[]
  liqdeposito        liqdeposito[]
}

model compra {
  compraId            Int          @id @default(autoincrement())
  clienteID           Int?
  compraFecha         DateTime?    @db.DateTime(0)
  compraTipoDocumento String?      @db.VarChar(20)
  compraMovimiento    String?      @db.VarChar(20)
  compraTipoCafe      Int?
  compraPrecioQQ      Decimal?     @db.Decimal(15, 2)
  compraCantidadQQ    Decimal?     @db.Decimal(15, 2)
  compraTotal         Decimal?     @db.Decimal(15, 2)
  compraTotalSacos    Decimal?     @db.Decimal(15, 2)
  compraRetencio      Decimal?     @db.Decimal(15, 2)
  compraEn            String?      @db.VarChar(20)
  compraDescripcion   String?      @db.VarChar(200)
  compradorID         Int?
  cliente             cliente?     @relation(fields: [clienteID], references: [clienteID], onDelete: Restrict, onUpdate: Restrict, map: "compra_ibfk_1")
  producto            producto?    @relation(fields: [compraTipoCafe], references: [productID], onDelete: Restrict, onUpdate: Restrict, map: "compra_ibfk_2")
  compradores         compradores? @relation(fields: [compradorID], references: [compradorId], onDelete: Restrict, onUpdate: Restrict, map: "fk_compra_comprador")

  @@index([clienteID], map: "clienteID")
  @@index([compraTipoCafe], map: "compraTipoCafe")
  @@index([compradorID], map: "fk_compra_comprador")
}

model contrato {
  contratoID          Int               @id @default(autoincrement())
  contratoclienteID   Int?
  contratoFecha       DateTime?         @db.DateTime(0)
  contratoMovimiento  String?           @db.VarChar(20)
  contratoTipoCafe    Int?
  contratoPrecio      Decimal?          @db.Decimal(15, 2)
  contratoCantidadQQ  Decimal?          @db.Decimal(15, 2)
  contratoTotalLps    Decimal?          @db.Decimal(15, 2)
  contratoEn          String?           @db.VarChar(20)
  contratoDescripcion String?           @db.VarChar(200)
  estado              String?           @default("Pendiente") @db.VarChar(20)
  contratoRetencionQQ Decimal?          @db.Decimal(15, 2)
  cierrecontrato      cierrecontrato[]
  cliente             cliente?          @relation(fields: [contratoclienteID], references: [clienteID], onDelete: Restrict, onUpdate: Restrict, map: "contrato_ibfk_1")
  producto            producto?         @relation(fields: [contratoTipoCafe], references: [productID], onDelete: Restrict, onUpdate: Restrict, map: "contrato_ibfk_2")
  deposito            deposito[]
  detallecontrato     detallecontrato[]

  @@index([contratoTipoCafe], map: "contratoTipoCafe")
  @@index([contratoclienteID], map: "contratoclienteID")
}

model deposito {
  depositoID          Int                  @id @default(autoincrement())
  depositoFecha       DateTime?            @db.DateTime(0)
  clienteID           Int?
  depositoTipoCafe    Int?
  contratoID          Int?
  depositoMovimiento  String?              @db.VarChar(20)
  depositoCantidadQQ  Decimal?             @db.Decimal(15, 2)
  depositoTotalSacos  Decimal?             @db.Decimal(15, 2)
  depositoEn          String?              @db.VarChar(20)
  depositoDescripcion String?              @db.VarChar(200)
  estado              String?              @default("Pendiente") @db.VarChar(20)
  depositoRetencionQQ Decimal?             @db.Decimal(15, 2)
  cliente             cliente?             @relation(fields: [clienteID], references: [clienteID], onDelete: Restrict, onUpdate: Restrict, map: "deposito_ibfk_1")
  producto            producto?            @relation(fields: [depositoTipoCafe], references: [productID], onDelete: Restrict, onUpdate: Restrict, map: "deposito_ibfk_2")
  contrato            contrato?            @relation(fields: [contratoID], references: [contratoID], onDelete: Restrict, onUpdate: Restrict, map: "fk_deposito_contrato")
  detalleliqdeposito  detalleliqdeposito[]

  @@index([clienteID], map: "clienteID")
  @@index([depositoTipoCafe], map: "depositoTipoCafe")
  @@index([contratoID], map: "fk_deposito_contrato")
}

model detallecontrato {
  detalleID      Int       @id @default(autoincrement())
  contratoID     Int
  cantidadQQ     Decimal   @db.Decimal(15, 2)
  precioQQ       Decimal   @db.Decimal(15, 2)
  tipoMovimiento String    @default("Entrega de contrato") @db.VarChar(50)
  fecha          DateTime? @default(now()) @db.DateTime(0)
  observaciones  String?   @db.VarChar(200)
  contrato       contrato  @relation(fields: [contratoID], references: [contratoID], onUpdate: Restrict, map: "detallecontrato_ibfk_1")

  @@index([contratoID], map: "contratoID")
}

model detalleliqdeposito {
  id          Int          @id @default(autoincrement())
  liqID       Int?
  depositoID  Int?
  cantidadQQ  Decimal?     @db.Decimal(15, 2)
  precio      Decimal?     @db.Decimal(15, 2)
  totalLps    Decimal?     @db.Decimal(15, 2)
  liqdeposito liqdeposito? @relation(fields: [liqID], references: [liqID], onDelete: Restrict, onUpdate: Restrict, map: "detalleliqdeposito_ibfk_1")
  deposito    deposito?    @relation(fields: [depositoID], references: [depositoID], onDelete: Restrict, onUpdate: Restrict, map: "detalleliqdeposito_ibfk_2")

  @@index([depositoID], map: "depositoID")
  @@index([liqID], map: "liqID")
}

model inventariocliente {
  inventarioClienteID  Int                    @id @default(autoincrement())
  clienteID            Int
  productoID           Int
  cantidadQQ           Decimal                @default(0.00) @db.Decimal(15, 2)
  cantidadSacos        Decimal                @default(0.00) @db.Decimal(15, 2)
  compradorID          Int?
  compradores          compradores?           @relation(fields: [compradorID], references: [compradorId], onDelete: Restrict, onUpdate: Restrict, map: "fk_inventario_comprador")
  cliente              cliente                @relation(fields: [clienteID], references: [clienteID], onUpdate: Restrict, map: "inventariocliente_ibfk_1")
  producto             producto               @relation(fields: [productoID], references: [productID], onUpdate: Restrict, map: "inventariocliente_ibfk_2")
  movimientoinventario movimientoinventario[]

  @@unique([clienteID, productoID], map: "uq_cliente_producto")
  @@index([productoID], map: "productoID")
  @@index([compradorID], map: "fk_inventario_comprador")
}

model liqdeposito {
  liqID              Int                  @id @default(autoincrement())
  liqFecha           DateTime?            @db.DateTime(0)
  liqclienteID       Int?
  liqTipoDocumento   String?              @db.VarChar(20)
  liqMovimiento      String?              @db.VarChar(20)
  liqTipoCafe        Int?
  liqPrecio          Decimal?             @db.Decimal(15, 2)
  liqCatidadQQ       Decimal?             @db.Decimal(15, 2)
  liqTotalLps        Decimal?             @db.Decimal(15, 2)
  liqEn              String?              @db.VarChar(20)
  liqDescripcion     String?              @db.VarChar(200)
  detalleliqdeposito detalleliqdeposito[]
  cliente            cliente?             @relation(fields: [liqclienteID], references: [clienteID], onDelete: Restrict, onUpdate: Restrict, map: "liqdeposito_ibfk_1")
  producto           producto?            @relation(fields: [liqTipoCafe], references: [productID], onDelete: Restrict, onUpdate: Restrict, map: "liqdeposito_ibfk_2")

  @@index([liqTipoCafe], map: "liqTipoCafe")
  @@index([liqclienteID], map: "liqclienteID")
}

model movimientoinventario {
  movimientoID        Int                                 @id @default(autoincrement())
  inventarioClienteID Int
  fecha               DateTime                            @default(now()) @db.DateTime(0)
  tipoMovimiento      movimientoinventario_tipoMovimiento
  referenciaTipo      String?                             @db.VarChar(50)
  referenciaID        Int?
  cantidadQQ          Decimal                             @db.Decimal(15, 2)
  cantidadSacos       Decimal                             @default(0.00) @db.Decimal(15, 2)
  nota                String?                             @db.VarChar(200)
  inventariocliente   inventariocliente                   @relation(fields: [inventarioClienteID], references: [inventarioClienteID], onUpdate: Restrict, map: "movimientoinventario_ibfk_1")

  @@index([inventarioClienteID], map: "inventarioClienteID")
}

model producto {
  productID         Int                 @id @default(autoincrement())
  productName       String              @unique(map: "UQ_Producto_Nombre") @db.VarChar(50)
  tara              Decimal?            @default(0.00) @db.Decimal(5, 2)
  descuento         Decimal?            @default(0.00) @db.Decimal(5, 2)
  factorOro         Decimal?            @default(1.00) @db.Decimal(10, 2)
  compra            compra[]
  contrato          contrato[]
  deposito          deposito[]
  inventariocliente inventariocliente[]
  inventarioempresa inventarioempresa?
  liqdeposito       liqdeposito[]
}

model inventarioempresa {
  inventarioEmpresaID Int      @id @default(autoincrement())
  productoID          Int      @unique(map: "uq_producto")
  cantidadQQ          Decimal  @default(0.00) @db.Decimal(15, 2)
  cantidadSacos       Decimal  @default(0.00) @db.Decimal(15, 2)
  producto            producto @relation(fields: [productoID], references: [productID], onUpdate: Restrict, map: "inventarioempresa_ibfk_1")
}

enum movimientoinventario_tipoMovimiento {
  Entrada
  Salida
}
