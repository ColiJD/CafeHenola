generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cliente {
  clienteID          Int                 @id @default(autoincrement())
  clienteCedula      String?             @unique(map: "clienteCedula") @db.VarChar(15)
  clienteNombre      String?             @db.VarChar(20)
  clienteApellido    String?             @db.VarChar(20)
  clienteDirecion    String?             @db.VarChar(200)
  clienteMunicipio   String?             @db.VarChar(30)
  clienteDepartament String?             @db.VarChar(30)
  claveIHCAFE        String?             @db.VarChar(30)
  clienteTelefono    String?             @db.VarChar(30)
  clienteRTN         String?             @db.VarChar(17)
  compra             compra[]
  contrato           contrato[]
  deposito           deposito[]
  inventariocliente  inventariocliente[]
  liqdeposito        liqdeposito[]
}

model compra {
  compraId            Int       @id @default(autoincrement())
  clienteID           Int?
  compraFecha         DateTime? @db.Date
  compraTipoDocumento String?   @db.VarChar(20)
  compraMovimiento    String?   @db.VarChar(20)
  compraTipoCafe      Int?
  compraPrecioQQ      Decimal?  @db.Decimal(15, 2)
  compraCatidadQQ     Decimal?  @db.Decimal(15, 2)
  compraTotal         Decimal?  @db.Decimal(15, 2)
  comprarTotalSacos   Decimal?  @db.Decimal(15, 2)
  compraRetencio      Decimal?  @db.Decimal(15, 2)
  compraEn            String?   @db.VarChar(20)
  compraDescripcion   String?   @db.VarChar(200)
  cliente             cliente?  @relation(fields: [clienteID], references: [clienteID], onDelete: Restrict, onUpdate: Restrict, map: "compra_ibfk_1")
  producto            producto? @relation(fields: [compraTipoCafe], references: [productID], onDelete: Restrict, onUpdate: Restrict, map: "compra_ibfk_2")

  @@index([clienteID], map: "clienteID")
  @@index([compraTipoCafe], map: "compraTipoCafe")
}

model deposito {
  depositoID          Int                  @id @default(autoincrement())
  depositoFecha       DateTime?            @db.DateTime(0)
  clienteID           Int?
  depositoTipoCafe    Int?
  contratoID          Int?
  depositoMovimiento  String?              @db.VarChar(20)
  depositoCantidadQQ  Decimal?             @db.Decimal(15, 2)
  depositoTotalSacos  Decimal?             @db.Decimal(15, 2)
  depositoEn          String?              @db.VarChar(20)
  depositoDescripcion String?              @db.VarChar(200)
  estado              String?              @default("Pendiente") @db.VarChar(20)
  cliente             cliente?             @relation(fields: [clienteID], references: [clienteID], onDelete: Restrict, onUpdate: Restrict, map: "deposito_ibfk_1")
  producto            producto?            @relation(fields: [depositoTipoCafe], references: [productID], onDelete: Restrict, onUpdate: Restrict, map: "deposito_ibfk_2")
  contrato            contrato?            @relation(fields: [contratoID], references: [contratoID], onDelete: Restrict, onUpdate: Restrict, map: "fk_deposito_contrato")
  detalleliqdeposito  detalleliqdeposito[]

  @@index([clienteID], map: "clienteID")
  @@index([depositoTipoCafe], map: "depositoTipoCafe")
  @@index([contratoID], map: "fk_deposito_contrato")
}

model producto {
  productID         Int                 @id @default(autoincrement())
  productName       String              @db.VarChar(50)
  compra            compra[]
  contrato          contrato[]
  deposito          deposito[]
  inventariocliente inventariocliente[]
  inventarioempresa inventarioempresa?
  liqdeposito       liqdeposito[]
}

model detalleliqdeposito {
  id          Int          @id @default(autoincrement())
  liqID       Int?
  depositoID  Int?
  cantidadQQ  Decimal?     @db.Decimal(15, 2)
  precio      Decimal?     @db.Decimal(15, 2)
  totalLps    Decimal?     @db.Decimal(15, 2)
  liqdeposito liqdeposito? @relation(fields: [liqID], references: [liqID], onDelete: Restrict, onUpdate: Restrict, map: "detalleliqdeposito_ibfk_1")
  deposito    deposito?    @relation(fields: [depositoID], references: [depositoID], onDelete: Restrict, onUpdate: Restrict, map: "detalleliqdeposito_ibfk_2")

  @@index([depositoID], map: "depositoID")
  @@index([liqID], map: "liqID")
}

model inventariocliente {
  inventarioClienteID Int      @id @default(autoincrement())
  clienteID           Int
  productoID          Int
  cantidadQQ          Decimal  @default(0.00) @db.Decimal(15, 2)
  cantidadSacos       Decimal  @default(0.00) @db.Decimal(15, 2)
  cliente             cliente  @relation(fields: [clienteID], references: [clienteID], onUpdate: Restrict, map: "inventariocliente_ibfk_1")
  producto            producto @relation(fields: [productoID], references: [productID], onUpdate: Restrict, map: "inventariocliente_ibfk_2")

  @@unique([clienteID, productoID], map: "uq_cliente_producto")
  @@index([productoID], map: "productoID")
}

model inventarioempresa {
  inventarioEmpresaID Int      @id @default(autoincrement())
  productoID          Int      @unique(map: "uq_producto")
  cantidadQQ          Decimal  @default(0.00) @db.Decimal(15, 2)
  cantidadSacos       Decimal  @default(0.00) @db.Decimal(15, 2)
  producto            producto @relation(fields: [productoID], references: [productID], onUpdate: Restrict, map: "inventarioempresa_ibfk_1")
}

model movimientoinventario {
  movimientoID   Int                                 @id @default(autoincrement())
  fecha          DateTime                            @default(now()) @db.DateTime(0)
  tipoInventario movimientoinventario_tipoInventario
  inventarioID   Int
  tipoMovimiento movimientoinventario_tipoMovimiento
  referenciaTipo String?                             @db.VarChar(50)
  referenciaID   Int?
  cantidadQQ     Decimal                             @db.Decimal(15, 2)
  cantidadSacos  Decimal                             @default(0.00) @db.Decimal(15, 2)
  nota           String?                             @db.VarChar(200)
}

model contrato {
  contratoID          Int               @id @default(autoincrement())
  contratoclienteID   Int?
  contratoFecha       DateTime?         @db.DateTime(0)
  contratoMovimiento  String?           @db.VarChar(20)
  contratoTipoCafe    Int?
  contratoPrecio      Decimal?          @db.Decimal(15, 2)
  contratoCatidadQQ   Decimal?          @db.Decimal(15, 2)
  contratoTotalLps    Decimal?          @db.Decimal(15, 2)
  contratoEn          String?           @db.VarChar(20)
  contratoDescripcion String?           @db.VarChar(200)
  estado              String?           @default("Pendiente") @db.VarChar(20)
  cliente             cliente?          @relation(fields: [contratoclienteID], references: [clienteID], onDelete: Restrict, onUpdate: Restrict, map: "contrato_ibfk_1")
  producto            producto?         @relation(fields: [contratoTipoCafe], references: [productID], onDelete: Restrict, onUpdate: Restrict, map: "contrato_ibfk_2")
  deposito            deposito[]
  detallecontrato     detallecontrato[]

  @@index([contratoTipoCafe], map: "contratoTipoCafe")
  @@index([contratoclienteID], map: "contratoclienteID")
}

model detallecontrato {
  detalleID      Int         @id @default(autoincrement())
  contratoID     Int
  liquidacionID  Int
  cantidadQQ     Decimal     @db.Decimal(15, 2)
  precioQQ       Decimal     @db.Decimal(15, 2)
  tipoMovimiento String      @default("Entrega de contrato") @db.VarChar(50)
  fecha          DateTime?   @default(now()) @db.DateTime(0)
  contrato       contrato    @relation(fields: [contratoID], references: [contratoID], onUpdate: Restrict, map: "detallecontrato_ibfk_1")
  liqdeposito    liqdeposito @relation(fields: [liquidacionID], references: [liqID], onUpdate: Restrict, map: "detallecontrato_ibfk_2")

  @@index([contratoID], map: "contratoID")
  @@index([liquidacionID], map: "liquidacionID")
}

model liqdeposito {
  liqID              Int                  @id @default(autoincrement())
  liqFecha           DateTime?            @db.DateTime(0)
  liqclienteID       Int?
  liqTipoDocumento   String?              @db.VarChar(20)
  liqMovimiento      String?              @db.VarChar(20)
  liqTipoCafe        Int?
  liqPrecio          Decimal?             @db.Decimal(15, 2)
  liqCatidadQQ       Decimal?             @db.Decimal(15, 2)
  liqTotalLps        Decimal?             @db.Decimal(15, 2)
  liqEn              String?              @db.VarChar(20)
  liqDescripcion     String?              @db.VarChar(200)
  detallecontrato    detallecontrato[]
  detalleliqdeposito detalleliqdeposito[]
  cliente            cliente?             @relation(fields: [liqclienteID], references: [clienteID], onDelete: Restrict, onUpdate: Restrict, map: "liqdeposito_ibfk_1")
  producto           producto?            @relation(fields: [liqTipoCafe], references: [productID], onDelete: Restrict, onUpdate: Restrict, map: "liqdeposito_ibfk_2")

  @@index([liqTipoCafe], map: "liqTipoCafe")
  @@index([liqclienteID], map: "liqclienteID")
}

enum movimientoinventario_tipoInventario {
  Cliente
  Empresa
}

enum movimientoinventario_tipoMovimiento {
  Entrada
  Salida
}
